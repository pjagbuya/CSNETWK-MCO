/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package CSNETWK_MP_Applications;
import java.io.File;
import java.util.*;


import CSNETWK_MP_Applications.UnivNodes.*;
import javafx.application.Application;
import javafx.stage.Stage;
public class App extends Application{
    final static String[] CMDS = {"/dir", "/?", "/add"};
    final static String SERVER_FILE_PATH = "server_files";
    final static String SERVER_IP = "127.0.0.1";
    public String getGreeting() {
        return "Hello World!";
    }
    public static void main(String[] args) {
        

        launch(args); // Launch the application with the main class
    }
      
    @Override
    public void start(Stage primaryStage) throws Exception {
        System.out.println(new App().getGreeting());
        Stage window = primaryStage;
        ServerView serverView = new ServerView(window);
    }

   private void closeProgram(Stage window)
    {   ConfirmBox boxMessage = new ConfirmBox();
        boolean answer = boxMessage.display("Warning", "Are you sure you want to exit?");


        if(answer)
            window.close();
    }

    private void addSocketToDB(int sockNum, ArrayList<Integer> serverSocketsID, ArrayList<SocketHandler> socketHandlers){

        String resp;
        if (serverSocketsID.isEmpty()){

            serverSocketsID.add(sockNum);

            // add user socket end point here
            SocketHandler tempSocket = new SocketHandler(sockNum);
            tempSocket.run();
            socketHandlers.add(tempSocket);
        }


    }

    // private void addNewSocket(Scanner sc, String userInput, ArrayList<Integer> serverSocketsID, ArrayList<SocketHandler> socketHandlers)
    private void addNewSocket(Scanner sc, ArrayList<Integer> serverSocketsID, ArrayList<SocketHandler> socketHandlers){
        
        boolean flag = true;
        String userInput;
        while (flag){
            System.out.print("Input a new socket number (/x for exit): ");
            userInput = sc.nextLine();
            if (userInput.equalsIgnoreCase("/x") ==true){
                flag = false;
            }
            else{
                try{
                    int sockNum = Integer.parseInt(userInput);
                    System.out.println();
                    System.out.println("Adding new Socket number " + sockNum + "...");

                    addSocketToDB(sockNum, serverSocketsID, socketHandlers);
                    
                }catch (NumberFormatException e){
                    System.out.println("Wrong input");
                    e.printStackTrace();
                    
        
                }
            }
        }


    }

    private void showDirectory(){


        File directory = new File(SERVER_FILE_PATH);
        System.out.println("Server Directory: ");

        if (directory.exists() && directory.isDirectory()) {
            File[] files = directory.listFiles();
            if (files != null) {
                for (File file : files) {
                    System.out.println(file.getName());
                }
            } else {
                System.out.println("Failed to list contents");
            }
        } else {
            System.out.println("Directory not found");
        }
    }

    private void showServerHelp(){
        System.out.println("/dir - shows current files in the directory of file storage for the server");
        System.out.println("/add - adds a socket to the network");
        System.out.println("/deleteall - deletes all sockets");
        System.out.println("/x - exits current prompt");

    }
	
}
